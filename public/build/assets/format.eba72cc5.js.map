{"version":3,"file":"format.eba72cc5.js","sources":["../../../node_modules/format/format.js"],"sourcesContent":["//\n// format - printf-like string formatting for JavaScript\n// github.com/samsonjs/format\n// @_sjs\n//\n// Copyright 2010 - 2013 Sami Samhuri <sami@samhuri.net>\n//\n// MIT License\n// http://sjs.mit-license.org\n//\n\n;(function() {\n\n  //// Export the API\n  var namespace;\n\n  // CommonJS / Node module\n  if (typeof module !== 'undefined') {\n    namespace = module.exports = format;\n  }\n\n  // Browsers and other environments\n  else {\n    // Get the global object. Works in ES3, ES5, and ES5 strict mode.\n    namespace = (function(){ return this || (1,eval)('this') }());\n  }\n\n  namespace.format = format;\n  namespace.vsprintf = vsprintf;\n\n  if (typeof console !== 'undefined' && typeof console.log === 'function') {\n    namespace.printf = printf;\n  }\n\n  function printf(/* ... */) {\n    console.log(format.apply(null, arguments));\n  }\n\n  function vsprintf(fmt, replacements) {\n    return format.apply(null, [fmt].concat(replacements));\n  }\n\n  function format(fmt) {\n    var argIndex = 1 // skip initial format argument\n      , args = [].slice.call(arguments)\n      , i = 0\n      , n = fmt.length\n      , result = ''\n      , c\n      , escaped = false\n      , arg\n      , tmp\n      , leadingZero = false\n      , precision\n      , nextArg = function() { return args[argIndex++]; }\n      , slurpNumber = function() {\n          var digits = '';\n          while (/\\d/.test(fmt[i])) {\n            digits += fmt[i++];\n            c = fmt[i];\n          }\n          return digits.length > 0 ? parseInt(digits) : null;\n        }\n      ;\n    for (; i < n; ++i) {\n      c = fmt[i];\n      if (escaped) {\n        escaped = false;\n        if (c == '.') {\n          leadingZero = false;\n          c = fmt[++i];\n        }\n        else if (c == '0' && fmt[i + 1] == '.') {\n          leadingZero = true;\n          i += 2;\n          c = fmt[i];\n        }\n        else {\n          leadingZero = true;\n        }\n        precision = slurpNumber();\n        switch (c) {\n        case 'b': // number in binary\n          result += parseInt(nextArg(), 10).toString(2);\n          break;\n        case 'c': // character\n          arg = nextArg();\n          if (typeof arg === 'string' || arg instanceof String)\n            result += arg;\n          else\n            result += String.fromCharCode(parseInt(arg, 10));\n          break;\n        case 'd': // number in decimal\n          result += parseInt(nextArg(), 10);\n          break;\n        case 'f': // floating point number\n          tmp = String(parseFloat(nextArg()).toFixed(precision || 6));\n          result += leadingZero ? tmp : tmp.replace(/^0/, '');\n          break;\n        case 'j': // JSON\n          result += JSON.stringify(nextArg());\n          break;\n        case 'o': // number in octal\n          result += '0' + parseInt(nextArg(), 10).toString(8);\n          break;\n        case 's': // string\n          result += nextArg();\n          break;\n        case 'x': // lowercase hexadecimal\n          result += '0x' + parseInt(nextArg(), 10).toString(16);\n          break;\n        case 'X': // uppercase hexadecimal\n          result += '0x' + parseInt(nextArg(), 10).toString(16).toUpperCase();\n          break;\n        default:\n          result += c;\n          break;\n        }\n      } else if (c === '%') {\n        escaped = true;\n      } else {\n        result += c;\n      }\n    }\n    return result;\n  }\n\n}());\n"],"names":["namespace","module","format","vsprintf","printf","fmt","replacements","argIndex","args","i","n","result","c","escaped","arg","tmp","leadingZero","precision","nextArg","slurpNumber","digits"],"mappings":"iCAWE,UAAW,CAGX,IAAIA,EAIFA,EAAYC,EAAiB,QAAAC,EAS/BF,EAAU,OAASE,EACnBF,EAAU,SAAWG,EAEjB,OAAO,QAAY,KAAe,OAAO,QAAQ,KAAQ,aAC3DH,EAAU,OAASI,GAGrB,SAASA,GAAkB,CACzB,QAAQ,IAAIF,EAAO,MAAM,KAAM,SAAS,CAAC,CAC1C,CAED,SAASC,EAASE,EAAKC,EAAc,CACnC,OAAOJ,EAAO,MAAM,KAAM,CAACG,CAAG,EAAE,OAAOC,CAAY,CAAC,CACrD,CAED,SAASJ,EAAOG,EAAK,CAsBnB,QArBIE,EAAW,EACXC,EAAO,CAAE,EAAC,MAAM,KAAK,SAAS,EAC9BC,EAAI,EACJC,EAAIL,EAAI,OACRM,EAAS,GACTC,EACAC,EAAU,GACVC,EACAC,EACAC,EAAc,GACdC,EACAC,EAAU,UAAW,CAAE,OAAOV,EAAKD,IAAc,EACjDY,EAAc,UAAW,CAEvB,QADIC,EAAS,GACN,KAAK,KAAKf,EAAII,EAAE,GACrBW,GAAUf,EAAII,KACdG,EAAIP,EAAII,GAEV,OAAOW,EAAO,OAAS,EAAI,SAASA,CAAM,EAAI,IAC/C,EAEEX,EAAIC,EAAG,EAAED,EAEd,GADAG,EAAIP,EAAII,GACJI,EAeF,OAdAA,EAAU,GACND,GAAK,KACPI,EAAc,GACdJ,EAAIP,EAAI,EAAEI,IAEHG,GAAK,KAAOP,EAAII,EAAI,IAAM,KACjCO,EAAc,GACdP,GAAK,EACLG,EAAIP,EAAII,IAGRO,EAAc,GAEhBC,EAAYE,EAAW,EACfP,OACH,IACHD,GAAU,SAASO,EAAS,EAAE,EAAE,EAAE,SAAS,CAAC,EAC5C,UACG,IACHJ,EAAMI,EAAO,EACT,OAAOJ,GAAQ,UAAYA,aAAe,OAC5CH,GAAUG,EAEVH,GAAU,OAAO,aAAa,SAASG,EAAK,EAAE,CAAC,EACjD,UACG,IACHH,GAAU,SAASO,EAAS,EAAE,EAAE,EAChC,UACG,IACHH,EAAM,OAAO,WAAWG,EAAO,CAAE,EAAE,QAAQD,GAAa,CAAC,CAAC,EAC1DN,GAAUK,EAAcD,EAAMA,EAAI,QAAQ,KAAM,EAAE,EAClD,UACG,IACHJ,GAAU,KAAK,UAAUO,EAAS,CAAA,EAClC,UACG,IACHP,GAAU,IAAM,SAASO,EAAO,EAAI,EAAE,EAAE,SAAS,CAAC,EAClD,UACG,IACHP,GAAUO,EAAO,EACjB,UACG,IACHP,GAAU,KAAO,SAASO,EAAO,EAAI,EAAE,EAAE,SAAS,EAAE,EACpD,UACG,IACHP,GAAU,KAAO,SAASO,EAAS,EAAE,EAAE,EAAE,SAAS,EAAE,EAAE,cACtD,cAEAP,GAAUC,EACV,WAEOA,IAAM,IACfC,EAAU,GAEVF,GAAUC,EAGd,OAAOD,CACR,CAEH"}